@using Domain.ShareData
@using LAHJA.Data.UI.Components.StudioLahjaAiVM
@using LAHJA.Data.UI.Models
@using LAHJA.Data.UI.Templates.Services
@using LAHJA.Them
@using LAHJA.UI.Components.StudioLahjaAi.Component
@using MudBlazor
@using LAHJA.Data.UI.Components.ServiceCard
@using LAHJA.ApiClient.Services.Query
@using Microsoft.AspNetCore.Components

@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LAHJA.ApiClient.Services.IT2TService _T2TService
@inject IQueryTextToSpeechService _queryTextToSpeechService
@inject TemplateServices _TemplateServices;
@inject ISnackbar Snackbar;
@inject IManageLanguageService _manageLanguageService
@* <MudCard Elevation="25" Class="rounded-lg pb-4 ">



        <MudCardHeader>
            <CardHeaderContent>

            </CardHeaderContent>
            <CardHeaderActions>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>

            <div class="d-flex  flex-wrap ">


            <MudForm @ref="form" Class="w-chat-t2s" ValidationDelay="300" OnValidSubmit="Onsubmit" OnInvalidSubmit="Onsubmit" Style="height:250px">

                <MudTextField T="string"
                              Label="Text"
                              HelperText="Choose a Text"
                              InputType="InputType.Text"

                              @bind-Value="@textSpeech" />




                <MudButton Disabled="@_processing"   FullWidth="true"
                           EndIcon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Class="mb-3" OnClick="Onsubmit">
                    @if (_processing)
                    {

                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Click me</MudText>
                    }
                </MudButton>
            </MudForm>


            <div class="w-chat-t2s">

            @if (OnResult != null && OnResult.Sccess && OnResult.OperationType == "TextToDialect")
            {
                <MudTextField   T="string" Label="Single Select" Variant="Variant.Outlined" Text="@OnResult.Text"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api" />
                <MudButton OnClick="ShareResult" EndIcon="@Icons.Material.Filled.Send"   FullWidth="true"
                           Variant="Variant.Filled">Share</MudButton>
            }

            </div>
            </div>
        </MudCardContent>











</MudCard> *@


<MudCard Elevation="25" Class="rounded-lg p-0 h-100 d-flex flex-column" Style="max-width: 100%; margin: auto;">


    @* <MudMainContent Class="h-100" style="min-height:500px !important"> *@


    @*  <SettingsDrawer TData="FilterItemData"
    IsVisible="@IsSettingsMenuVisible"
    IsVisibleChanged="@((bool visible) => IsSettingsMenuVisible = visible)"
    Title="@GetText("Settings")"
    CurrentLanguage="@CurrentLanguage"
    Filters="@Filters" />

    <MudPaper Class="pa-4 border h-100">
    @if (SelectedComponent != null)
    {
    @SelectedComponent
    }
    else
    {
    <MudText Typo="Typo.h6">@GetText("Select an item from the menu to display content")</MudText>
    }
    </MudPaper>
    </MudMainContent> *@
    <div class="d-flex flex-row justify-content-around ">
        <FilterItemSelected Filter="CategoriesFilter" CurrentLanguage="@CurrentLanguage" />
        <FilterItemSelected Filter="LanguagesFilter" CurrentLanguage="@CurrentLanguage" />
        <FilterItemSelected Filter="ServiceTypeFilter" CurrentLanguage="@CurrentLanguage" />
        <FilterItemSelected Filter="ModelTypesFilter" CurrentLanguage="@CurrentLanguage" />
        <FilterItemSelected Filter="DialectsFilter" CurrentLanguage="@CurrentLanguage" />

    </div>

    <FilterOptions CurrentLanguage="@CurrentLanguage" Filters="@Filters" />

    <MudCardContent Class="flex-grow-1 mt-2 border-0 p-0 w-100 p-2 overflow-auto" Style="max-height:300px;min-height:300px">
        <div id="chat-messages" class="d-flex flex-column gap-2">
            @if (ChatMessages != null && ChatMessages.Any())
            {
                @foreach (var message in ChatMessages)
                {
                    <div class="chat-bubble ">
                        <MudPaper Class="px-3 py-1 d-flex flex-row justify-content-around align-items-center" Style="@("background-color:"+@message.BubbleColor)">
                            <MudText Class="mb-0 fs-small fw-normal" style="font-size:12px !important; font-weight:normal !important">
                                @message.DisplayedContent
                            </MudText>
                            <MudIconButton class="mx-2" Size="Size.Medium" style="height:50px" Icon="@Icons.Material.Filled.SurroundSound" Color="@AppColors.BASE_COLOR_ENUM" OnClick="@(() => speechText(message.DisplayedContent))" Edge="Edge.End" />
                        </MudPaper>
                    </div>
                }
            }
            else
            {
                <MudText Typo="Typo.body2" Class="text-center text-muted">
                    No messages yet. Start the conversation!
                </MudText>
            }
        </div>
    </MudCardContent>
    <MudCard Style="width:100%" Class="mb-3 d-flex flex-wrap justify-content-start align-items-start">
        <FilterOptions CurrentLanguage="@CurrentLanguage" Filters="@FilterModels" />
        <FilterItemSelected Filter="ModelReleasesFilter" CurrentLanguage="@CurrentLanguage" />
        <MudCard Style="width:100%" Class="d-flex flex-row-reverse">
            <MudCardContent Style="width:100%">

                <MudTextField T="string"
                              Required="true"
                              Class="custom-focus-border py-2 rounded-3"
                              style="font-size:12px !important; font-weight:normal !important"
                              RequiredError="Enter your Message!"
                              @bind-Value="@textSpeech"
                              Placeholder="Type a message..."
                              Variant="Variant.Outlined"
                              MaxLines="14" />

            </MudCardContent>
            <MudCardActions Class="pt-0">
                <MudSpacer />
                <MudTooltip Text="Submit">
                    <MudIconButton Disabled="@_processing" ButtonType="ButtonType.Submit" OnClick="OnSubmit" Icon="@Icons.Material.Filled.Send"
                                   Size="Size.Medium" Color="@AppColors.BASE_COLOR_ENUM">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Send" Color="@AppColors.BASE_COLOR_ENUM" />
                        }

                    </MudIconButton>

                </MudTooltip>



            </MudCardActions>


        </MudCard>
    </MudCard>


</MudCard>

<style>


    .custom-focus-border:focus-within {
        border-color: rgba(11,186,131,1) !important;
    }

    .chat-bubble {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 10px;
    }

        .chat-bubble.User {
            justify-content: flex-end;
        }

        .chat-bubble .mud-paper {
            border-radius: 10px;
            max-width: 75%;
        }


        .chat-bubble.User .mud-paper {
            background-color: #e3f2fd;
        }

        .chat-bubble.System .mud-paper {
            background-color: #eeeeee;
        }

</style>
@code {
    private bool IsSettingsMenuVisible = false;
    private string CurrentLanguage = "ar";

    private RenderFragment? SelectedComponent;


    private FilterItemData SelectedCategory;
    private FilterItemData SelectedServiceType;
    private FilterItemData SelectedLangague;
    private FilterItemData SelectedTypeLahaga;
    private FilterItemData SelectedTypeModel;
    private FilterItemData SelectedDialectType;
    private FilterItemData SelectedModelRelease;

    public StudioFilterDefinition<FilterItemData> CategoriesFilter { get; set; } = new();
    public StudioFilterDefinition<FilterItemData> LanguagesFilter { get; set; } = new();
    public StudioFilterDefinition<FilterItemData> ModelTypesFilter { get; set; } = new();
    public StudioFilterDefinition<FilterItemData> ServiceTypeFilter { get; set; } = new();
    public StudioFilterDefinition<FilterItemData> DialectsFilter { get; set; } = new();
    public StudioFilterDefinition<FilterItemData> ModelReleasesFilter { get; set; } = new();


    private List<StudioFilterDefinition<FilterItemData>> Filters = new();
    private List<StudioFilterDefinition<FilterItemData>> FilterModels = new();


    // œÊ«· «·«Œ Ì«—
    private void SelectCategory(FilterItemData item)
    { /* „‰ÿﬁ «Œ Ì«— «·›∆… */


        SelectedCategory = item;

    }
    private void SelectLanguage(FilterItemData item)
    {


        SelectedLangague = item;
        StateHasChanged();
    }
    private void SelectModelType(FilterItemData item)
    {

        SelectedTypeModel = item;

        if (item.TypeModel == "LAHJA")
        {
            DialectsFilter = GetDialects();
        }

        StateHasChanged();
    }
    private void SelectDialectType(FilterItemData item)
    {
        SelectedDialectType = item;
        StateHasChanged();
    }

    private void SelectServiceType(FilterItemData item)
    {
        SelectedServiceType = item;
    }

    private void SelectModelRelease(FilterItemData item)
    { /* „‰ÿﬁ «Œ Ì«— ≈’œ«— «·‰„Ê–Ã */

        SelectedModelRelease = item;


    }

    private Dictionary<string, string> TranslationLabels = new();

    private Dictionary<string, string> EnglishLabels = new()
{
    { "Category", "Category" },
    { "Language", "Language" },
    { "Model Type", "Model Type" },
    { "Type LAHJA", "Type LAHJA" },
    { "Gender", "Gender" },
    { "Model Version", "Model Version" }  // ≈÷«›… "≈’œ«— «·‰„Ê–Ã"
};

    // ﬁ«„Ê” »«··€… «·⁄—»Ì…
    private Dictionary<string, string> ArabicLabels = new()
{
    { "Category", "«·›∆…" },
    { "Language", "«··€…" },
    { "Model Type", "‰Ê⁄ «·‰„Ê–Ã" },
    { "Type LAHJA", "‰Ê⁄ «··ÂÃ…" },
    { "Gender", "«·Ã‰”" },
    { "Model Version", "≈’œ«— «·‰„Ê–Ã" }  // ≈÷«›… "≈’œ«— «·‰„Ê–Ã"
};
    // œ«·… ··Õ’Ê· ⁄·Ï »Ì«‰«  «·›∆«  (Categories)

    private StudioFilterDefinition<FilterItemData> GetCategories()
    {
        return new StudioFilterDefinition<FilterItemData>
            {
                Title = GetText("Category"),
                Icon = Icons.Material.Filled.Category,
                Options = new List<FilterItemData>
        {
            new FilterItemData { Id = 1, Icon = Icons.Material.Filled.Newspaper, Identifier = "news", Text = new Dictionary<string, string> { { "ar", "√Œ»«—" }, { "en", "News" } } },
            new FilterItemData { Id = 2, Identifier = "general", Text = new Dictionary<string, string> { { "ar", "⁄«„" }, { "en", "General" } } },
            new FilterItemData { Id = 3, Identifier = "questions", Text = new Dictionary<string, string> { { "ar", "√”∆·…" }, { "en", "Questions" } } },
            new FilterItemData { Id = 4, Identifier = "sports", Text = new Dictionary<string, string> { { "ar", "—Ì«÷…" }, { "en", "Sports" } } },
            new FilterItemData { Id = 5, Identifier = "technology", Text = new Dictionary<string, string> { { "ar", " ﬂ‰Ê·ÊÃÌ«" }, { "en", "Technology" } } }
        },
                OnSelectionChanged = EventCallback.Factory.Create<FilterItemData>(this, SelectCategory)
            };
    }

    // œ«·… ··Õ’Ê· ⁄·Ï »Ì«‰«  «··€«  (Languages)
    private StudioFilterDefinition<FilterItemData> GetLanguages()
    {
        return new StudioFilterDefinition<FilterItemData>
            {
                Title = GetText("Language"),
                Icon = Icons.Material.Filled.Language,
                Options = new List<FilterItemData>
        {
            new FilterItemData { Id = 1, Identifier = "en", Text = new Dictionary<string, string> { { "ar", "«·≈‰Ã·Ì“Ì…" }, { "en", "English" } } },
            new FilterItemData { Id = 2, Identifier = "ar", Text = new Dictionary<string, string> { { "ar", "«·⁄—»Ì…" }, { "en", "Arabic" } } }
        },
                OnSelectionChanged = EventCallback.Factory.Create<FilterItemData>(this, SelectLanguage)
            };
    }

    // œ«·… ··Õ’Ê· ⁄·Ï »Ì«‰«  √‰Ê«⁄ «·‰„«–Ã (Model Types)
    private StudioFilterDefinition<FilterItemData> GetModelTypes()
    {
        return new StudioFilterDefinition<FilterItemData>
            {
                Title = GetText("Model Type"),
                Icon = Icons.Material.Filled.ModelTraining,
                Options = new List<FilterItemData>
        {
            new FilterItemData { Id = 1, Identifier = "Official", Text = new Dictionary<string, string> { { "ar", "«·—”„Ì…" }, { "en", "Official" } } },
            new FilterItemData { Id = 2, Identifier = "LAHJA", Text = new Dictionary<string, string> { { "ar", "·ÂÃ…" }, { "en", "LAHJA" } } }
        },
                OnSelectionChanged = EventCallback.Factory.Create<FilterItemData>(this, SelectModelType)
            };
    }

    // œ«·… ··Õ’Ê· ⁄·Ï »Ì«‰«  «··ÂÃ«  (Dialects)
    private StudioFilterDefinition<FilterItemData> GetDialects()
    {
        return new StudioFilterDefinition<FilterItemData>
            {
                Title = GetText("Type LAHJA"),
                Icon = Icons.Material.Filled.SignLanguage,
                Options = new List<FilterItemData>
        {
            new FilterItemData
            {
                Id = 1,
                Identifier = "NA",
                Text = new Dictionary<string, string>
                {
                    { "ar", "«··ÂÃ… «·‰ÃœÌ…" },
                    { "en", "Najdi Accent" }
                }
            },
            new FilterItemData
            {
                Id = 2,
                Identifier = "HA",
                Text = new Dictionary<string, string>
                {
                    { "ar", "«··ÂÃ… «·ÕÃ«“Ì…" },
                    { "en", "Hejaz Accent" }
                }
            },
            new FilterItemData
            {
                Id = 3,
                Identifier = "SH",
                Text = new Dictionary<string, string>
                {
                    { "ar", "«··ÂÃ… «·Ã‰Ê»Ì…" },
                    { "en", "Southern Accent" }
                }
            },
            new FilterItemData
            {
                Id = 4,
                Identifier = "EA",
                Text = new Dictionary<string, string>
                {
                    { "ar", "«··ÂÃ… «·‘—ﬁÌ…" },
                    { "en", "Eastern Accent" }
                }
            }
        },
                OnSelectionChanged = EventCallback.Factory.Create<FilterItemData>(this, SelectDialectType)
            };
    }


    // œ«·… ··Õ’Ê· ⁄·Ï »Ì«‰«  «·≈’œ«—«  (Model Releases)
    private StudioFilterDefinition<FilterItemData> GetModelReleases()
    {
        return new();
    }



    private StudioFilterDefinition<FilterItemData> getGPTServices()
    {
        return new StudioFilterDefinition<FilterItemData>
            {
                Title = GetText("GPT Services"),
                Icon = Icons.Material.Filled.ModelTraining,
                Options = new List<FilterItemData>
            {
                // ≈÷«›… «·≈’œ«—«  «·≈‰Ã·Ì“Ì…
                new FilterItemData
                {
                    Id = 1,
                    Identifier = "gpt",  // ‰›” «·‹ Identifier
                    Text = new Dictionary<string, string>
                    {
                        { "ar", "chat gpt " },
                        { "en", "chat gpt" }
                    },
                    Icon = Icons.Material.Filled.Group
                },
                   new FilterItemData
                {
                    Id = 1,
                    Identifier = "gpt",  // ‰›” «·‹ Identifier
                    Text = new Dictionary<string, string>
                    {
                        { "ar", "Bing " },
                        { "en", "Bing" }
                    },
                    Icon = Icons.Material.Filled.Group
                }
            },
                OnSelectionChanged = EventCallback.Factory.Create<FilterItemData>(this, SelectServiceType)
            };
    }



    private void LoadFilters()
    {
        CategoriesFilter = GetCategories();
        LanguagesFilter = GetLanguages();
        ModelTypesFilter = GetModelTypes();
        DialectsFilter = GetDialects();
        ModelReleasesFilter = GetModelReleases();
        ServiceTypeFilter = getGPTServices();
    }

    // private MudForm form;
    private string textSpeech;
    // private bool _processing = false;

    private List<ChatMessage> ChatMessages = new();

    protected async void changeLanguage(string currentLangCode)
    {
        CurrentLanguage = currentLangCode;
        TranslationLabels = currentLangCode == "ar" ? ArabicLabels : EnglishLabels;
        InvokeAsync(StateHasChanged);
    }
    private string GetText(string key)
    {

        if (TranslationLabels.ContainsKey(key))
        {
            return TranslationLabels[key];
        }
        return key;
    }

    protected override async void OnAfterRender(bool firstRender)

    {
        if (firstRender)
        {
            CurrentLanguage = await _manageLanguageService.GetLanguageAsync();
            changeLanguage(CurrentLanguage);
            // LoadData();
            LoadFilters();
            StateHasChanged();

        }


    }

    protected override void OnInitialized()
    {

        TranslationLabels = ArabicLabels;


    }

    private async void speechText(string message)
    {


        if (!string.IsNullOrEmpty(message))
        {

            var res = await _queryTextToSpeechService.TextToSpeechAsync(new QueryRequestTextToSpeech
                {
                    Url = "https://api-inference.huggingface.co/models/wasmdashai/vits-ar-sa-huba-v2",
                    Data = message,
                });


        }
    }

    private async Task TriggerTypingEffect(ChatMessage message)
    {
        if (string.IsNullOrEmpty(message.Content))
            return;

        message.DisplayedContent = string.Empty;
        foreach (char c in message.Content)
        {
            message.DisplayedContent += c;
            StateHasChanged();
            await Task.Delay(50);
        }
    }
    public class ChatMessage
    {
        public string Content { get; set; }
        public string DisplayedContent { get; set; } = string.Empty;
        public string IsUser { get; set; }
        public string BubbleColor { get; set; }
    }



    private MudForm form;
    private bool _processing = false;
    private void testing()
    {
        Navigation.NavigateTo("/ServiceInforMationModel");
    }

    [Parameter] public TextToDialectComponent? Param { get; set; }

    [Parameter] public EventCallback ShareResult { get; set; }

    // [Parameter] public EventCallback<OnDataResult> OnSubmit { get; set; }

    [Parameter] public OnDataResult? OnResult { get; set; } = null;


    private bool flag1 = false;
    private string SelectedDialect = "";

    private IEnumerable<string> TextStrength(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            yield return "Text cannot be empty.";

        if (value.Length < 6)
            yield return "Password must be at least 8 characters long.";
        if (!value.Any(ch => "!@#$%^&*()".Contains(ch)))
            yield return "Password must include at least one special character (!@#$%^&*()).";
    }

    private async Task addTextToChatMessage(string message, string bg = "#21c99569")
    {
        ChatMessages.Add(new ChatMessage
            {
                DisplayedContent = message,
                IsUser = "System",
                BubbleColor = bg
            });

        StateHasChanged();
    }
    private async Task OnSubmit()
    {
        try
        {
            _processing = true;

            if (ChatMessages != null && ChatMessages.Count() > 0)
                ChatMessages.Clear();



            StateHasChanged();

            if (!string.IsNullOrWhiteSpace(textSpeech))
            {

                addTextToChatMessage(textSpeech);



                var resService = await _TemplateServices.Text2Text(new DataBuildServiceBase { Text = textSpeech, ServiceId = "1" });
                // _processing = _TemplateServices.IsEndProcessing;
                // StateHasChanged();
                if (resService.Succeeded)
                {

                    var text = resService.Data.Result;
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        // addTextToChatMessage(text, "#eeeeee");

                        var msg = new ChatMessage
                            {
                                Content = text,
                                IsUser = "System",
                                BubbleColor = ""
                            };

                        ChatMessages.Add(msg);

                        await TriggerTypingEffect(msg);

                        _processing = false;

                    }
                }
                else
                {
                    Snackbar.Add("·«ÌÊÃœ ·œÌﬂ —’Ìœ ﬂ«›Ì „‰ «·ÿ·»« ", Severity.Warning);
                    _processing = false; // Snackbar.Add(resService.Messages?[0] ?? "null", Severity.Warning);
                }


                StateHasChanged();
                // var response = await _T2TService.T2TAsync(new QueryRequestTextToText { Text = textSpeech });

                // if (response.Succeeded)
                // {
                //     string decodedText = response.Data.Result;
                //     if (!string.IsNullOrWhiteSpace(decodedText))
                //     {
                //         addTextToChatMessage(decodedText,"#eeeeee");

                //         var msg = new ChatMessage
                //             {
                //                 Content = decodedText,
                //                 IsUser = "System",
                //                 BubbleColor = ""
                //             };

                //         ChatMessages.Add(msg);

                //         await TriggerTypingEffect(msg);

                //         _processing = false;

                //     }


                //     OnResult = new OnDataResult()
                //      {
                //              Text = decodedText,
                //              OperationType="TextToDialect",
                //              Sccess=true,
                //              SelectLanguage=SelectedDialect,
                //             TypeSend="Send"
                //      };

                //     await OnSubmit.InvokeAsync(OnResult);


                // }
                //   textSpeech = "";
                //   StateHasChanged();

            }

        }

        catch (Exception ex)
        {

        }


    }
    // private Task OpenDialogAsyncS()
    // {

    //     var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };

    //     return DialogService.ShowAsync<DialogUsageExample_Dialog>("Simple Dialog", options);
    // }
}