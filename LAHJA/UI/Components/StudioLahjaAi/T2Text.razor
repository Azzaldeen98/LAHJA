@using LAHJA.Data.UI.Models
@using LAHJA.Them
@using MudBlazor
@using LAHJA.Data.UI.Components.ServiceCard
@using LAHJA.ApiClient.Services.Query
@using Microsoft.AspNetCore.Components
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LAHJA.ApiClient.Services.IT2TService _T2TService
@inject IQueryTextToSpeechService _queryTextToSpeechService

@* <MudCard Elevation="25" Class="rounded-lg pb-4 ">

    

        <MudCardHeader>
            <CardHeaderContent>
                
            </CardHeaderContent>
            <CardHeaderActions>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>

            <div class="d-flex  flex-wrap ">


            <MudForm @ref="form" Class="w-chat-t2s" ValidationDelay="300" OnValidSubmit="Onsubmit" OnInvalidSubmit="Onsubmit" Style="height:250px">

                <MudTextField T="string"
                              Label="Text"
                              HelperText="Choose a Text"
                              InputType="InputType.Text"
                          
                              @bind-Value="@textSpeech" />

            


                <MudButton Disabled="@_processing"   FullWidth="true"
                           EndIcon="@Icons.Material.Filled.Send" Variant="Variant.Filled" Class="mb-3" OnClick="Onsubmit">
                    @if (_processing)
                    {

                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Click me</MudText>
                    }
                </MudButton>
            </MudForm>


            <div class="w-chat-t2s">

            @if (OnResult != null && OnResult.Sccess && OnResult.OperationType == "TextToDialect")
            {
                <MudTextField   T="string" Label="Single Select" Variant="Variant.Outlined" Text="@OnResult.Text"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api" />
                <MudButton OnClick="ShareResult" EndIcon="@Icons.Material.Filled.Send"   FullWidth="true"
                           Variant="Variant.Filled">Share</MudButton>
            }

            </div>
            </div>
        </MudCardContent>









 

</MudCard> *@


<MudCard Elevation="25" Class="rounded-lg p-0 h-100 d-flex flex-column" Style="max-width: 100%; margin: auto;">

    <MudCardContent Class="flex-grow-1 p-0 w-100 p-2 overflow-auto" Style="max-height:300px;min-height:300px">
        <div    id="chat-messages" class="d-flex flex-column gap-2">
            @if (ChatMessages != null && ChatMessages.Any())
            {
                @foreach (var message in ChatMessages)
                {
                    <div class="chat-bubble ">
                                        <MudPaper Class="px-3 py-1 d-flex flex-row justify-content-around align-items-center" Style="@("background-color:"+@message.BubbleColor)">
                                    <MudText    Class="mb-0 fs-small fw-normal" style="font-size:12px !important; font-weight:normal !important">
                                @message.DisplayedContent
                            </MudText>
                                <MudIconButton class="mx-2" Size="Size.Medium" style="height:50px" Icon="@Icons.Material.Filled.SurroundSound" Color="@AppColors.BASE_COLOR_ENUM" OnClick="@(() => speechText(message.DisplayedContent))" Edge="Edge.End" />
                        </MudPaper>
                    </div>
                }
            }
            else
            {
                <MudText Typo="Typo.body2" Class="text-center text-muted">
                    No messages yet. Start the conversation!
                </MudText>
            }
        </div>
    </MudCardContent>
    <MudCard Style="width:100%" Class="mb-3 d-flex flex-row-reverse">
      
        <MudCardContent Style="width:100%">
          
            <MudTextField
                T="string"
                Required="true"
                Class="custom-focus-border py-2 rounded-3" 
                style="font-size:12px !important; font-weight:normal !important"
                RequiredError="Enter your Message!"
                @bind-Value="@textSpeech"
                Placeholder="Type a message..."     
                Variant="Variant.Outlined"
                MaxLines="14"/>

        </MudCardContent>
        <MudCardActions Class="pt-0">
            <MudSpacer/>
            <MudTooltip Text="Submit">
                <MudIconButton  Disabled="@_processing" ButtonType="ButtonType.Submit" OnClick="OnSubmit" Icon="@Icons.Material.Filled.Send"
                Size="Size.Medium" Color="@AppColors.BASE_COLOR_ENUM">
                @if (_processing)
                {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                       <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Send" Color="@AppColors.BASE_COLOR_ENUM" /> 
                }

            </MudIconButton>
            </MudTooltip>
        </MudCardActions>
     
    </MudCard>

    
</MudCard>

<style>


    .custom-focus-border:focus-within  {
        border-color: rgba(11,186,131,1) !important;  
    }
    .chat-bubble {
        display: flex;
        justify-content: flex-start;
        margin-bottom: 10px;
    }

    .chat-bubble.User {
        justify-content: flex-end;
    }

    .chat-bubble .mud-paper {
        border-radius: 10px;
        max-width: 75%;
    }

 
    .chat-bubble.User .mud-paper {
        background-color: #e3f2fd; 
    }

    .chat-bubble.System .mud-paper {
        background-color: #eeeeee; 
    }

     
</style>

@code {
        // private MudForm form;
    private string textSpeech;
    // private bool _processing = false;

    private List<ChatMessage> ChatMessages = new();


    private async void speechText(string message){


        if(!string.IsNullOrEmpty(message)){

           var res= await _queryTextToSpeechService.TextToSpeechAsync(new QueryRequestTextToSpeech { 
                Url="https://api-inference.huggingface.co/models/wasmdashai/vits-ar-sa-huba-v2",
                    Data = message,
            }) ;


        }
    }

    private async Task TriggerTypingEffect(ChatMessage message)
    {
        if (string.IsNullOrEmpty(message.Content))
            return;

        message.DisplayedContent = string.Empty;
        foreach (char c in message.Content)
        {
            message.DisplayedContent += c;
            StateHasChanged();
            await Task.Delay(50); 
        }
    }
    public class ChatMessage
    {
        public string Content { get; set; }
        public string DisplayedContent { get; set; } = string.Empty; 
        public string IsUser { get; set; } 
        public string BubbleColor { get; set; }
    }



    private MudForm form;
    private bool _processing = false;
    private void testing()
    {
        Navigation.NavigateTo("/ServiceInforMationModel");
    }

    [Parameter] public TextToDialectComponent? Param { get; set; }

    [Parameter] public EventCallback ShareResult { get; set; }

    // [Parameter] public EventCallback<OnDataResult> OnSubmit { get; set; }

    [Parameter] public OnDataResult? OnResult { get; set; } = null;


    private bool flag1 = false;
    private string SelectedDialect = "";

    private IEnumerable<string> TextStrength(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            yield return "Text cannot be empty.";

        if (value.Length < 6)
            yield return "Password must be at least 8 characters long.";
        if (!value.Any(ch => "!@#$%^&*()".Contains(ch)))
            yield return "Password must include at least one special character (!@#$%^&*()).";
    }

    private async Task addTextToChatMessage(string message,string bg="#21c99569")
    {
        ChatMessages.Add(new ChatMessage
                        {
                            DisplayedContent = message,
                            IsUser = "System",
                            BubbleColor =bg 
                        });

        StateHasChanged();
    }
    private async Task OnSubmit()
    {
        try
        {
             _processing = true;

            if (ChatMessages != null && ChatMessages.Count()>0)
                ChatMessages.Clear();

           
  
            StateHasChanged();

            if (!string.IsNullOrWhiteSpace(textSpeech))
            {

                addTextToChatMessage(textSpeech);



                var response = await _T2TService.T2TAsync(new QueryRequestTextToText { Text = textSpeech });

                if (response.Succeeded)
                {
                    string decodedText = response.Data.Text;
                    if (!string.IsNullOrWhiteSpace(decodedText))
                    {
                        // addTextToChatMessage(decodedText,"#eeeeee");

                        var msg = new ChatMessage
                            {
                                Content = decodedText,
                                IsUser = "System",
                                BubbleColor = ""
                            };

                        ChatMessages.Add(msg);

                        await TriggerTypingEffect(msg);

                        _processing = false;

                    }
              

                    // OnResult = new OnDataResult()
                    //  {
                    //          Text = decodedText,
                    //          OperationType="TextToDialect",
                    //          Sccess=true,
                    //          SelectLanguage=SelectedDialect,
                    //         TypeSend="Send"
                    //  };

                    // await OnSubmit.InvokeAsync(OnResult);


                }
                  textSpeech = "";
                  StateHasChanged();

                }

        }

        catch (Exception ex)
        {

        }


    }
    // private Task OpenDialogAsyncS()
    // {

    //     var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };

    //     return DialogService.ShowAsync<DialogUsageExample_Dialog>("Simple Dialog", options);
    // }
}