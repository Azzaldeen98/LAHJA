@using LAHJA.ApiClient.Models
@using LAHJA.ApiClient.Services.Query
@using LAHJA.ApiClient.Services.VoiceBot
@using LAHJA.Data.UI.Components.StudioLahjaAiVM
@using LAHJA.Data.UI.Models
@using LAHJA.Data.UI.Templates.Services
@using LAHJA.Them
 @using MudBlazor
 @using LAHJA.Data.UI.Components.ServiceCard
 @using Microsoft.AspNetCore.Components
 @* @inherits StudioAi *@
@inject TemplateServices templateServices
@inject NavigationManager Navigation 
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<T2Speech SubmitSend="@OnSubmit" />



@code {


    // private bool isAudioPlaying = false;
    // private bool isAudioPlayingIsEnd = true;

    // private async Task OnPlay()
    // {
    //     isAudioPlayingIsEnd = true;
    //     isAudioPlaying = true;
    //     StateHasChanged();
    // }

    // private async Task OnPause()
    // {
    //     isAudioPlaying = false;
    //     _processing = false;
    //     StateHasChanged();
    // }

    // private async Task OnEnded()
    // {
    //     isAudioPlayingIsEnd = false;
    //     isAudioPlaying = false;
    //     _processing = false;
    //     StateHasChanged();
    // }


}




@code
{

    // private MudTextField<string> multilineReference;
    // private MudForm form;
    // private bool _processing = false;
    // [Parameter] public DataBuildServicePage DataBuild { get; set; }
    // [Parameter] public TextToSpeechComponent? Param { get; set; } = null;
    // [Parameter] public EventCallback<string> PlayTextToSpeech { get; set; }
    // [Parameter] public EventCallback SaveAudio { get; set; }
    // [Parameter] public string OnTextSpeech { get; set; } = "";
    // [Parameter] public string? OnResultUrl { get; set; } = "";
    // [Parameter] public string? ModelId { get; set; } = "vits-ar-sa-A";
    // private string Textt;
    // private bool flag = false;

    // private string SelectedLanguage { get; set; }
    // private string textSpeech = "";
    // private string SelectedDialect = "";

    // [Parameter] public EventCallback<OnDataResult> OnSubmit { get; set; }

    // [Parameter] public OnDataResult? OnResult { get; set; } = null;

    // private IEnumerable<string> TextStrength(string value)
    // {
    //     if (string.IsNullOrWhiteSpace(value))
    //         yield return "Text cannot be empty.";


    //     if (value.Length < 6)
    //         yield return "Password must be at least 8 characters long.";
    //     if (!value.Any(ch => "!@#$%^&*()".Contains(ch)))
    //         yield return "Password must include at least one special character (!@#$%^&*()).";
    // }

    private async Task OnSubmit(DataBuildServiceBase data)
    {
        try
        {
            data.ServiceId = "2";
                var response = await templateServices.Text2Speech(data);
                if (response.Succeeded)
                {

                }
                else
                {
                    Snackbar.Add("·«ÌÊÃœ ·œÌﬂ —’Ìœ ﬂ«›Ì „‰ «·ÿ·»« ", Severity.Warning);

                }
            


        }

        catch (Exception ex)
        {

        }
     

    }

    // private void testing()
    // {
    //     Navigation.NavigateTo("/ShowInSound");
    // }

    // private async Task OnCancel()
    // {
    //     _processing = false;
    //     StateHasChanged();
    // }




}

