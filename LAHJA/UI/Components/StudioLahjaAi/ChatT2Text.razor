@using LAHJA.Data.UI.Models
@inject LAHJA.ApiClient.Services.IT2TService _T2TService

<style>

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px;
        width: 100%;
        max-width: 600px;
        margin: auto;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
    }


    .chat-input {
        display: flex;
        align-items: center;
        padding: 10px;
        border-top: 1px solid #ddd;
        background-color: #fff;
    }

    .input-field {
        flex-grow: 1;
        margin-right: 10px;
    }

    .message {
        padding: 10px;
        margin-bottom: 8px;
        border-radius: 8px;
        max-width: 40%;
    }

    .user-message
    
    {
        background-color: #d1f4ff;
        margin-left: auto;
    }


    .bot-message 
    {
        background-color: #e0e0e0;
        margin-right: auto;
        width: 300px
    }

</style>











<MudPaper Class="chat-container" Elevation="2">
    <div class="chat-messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {



            <MudPaper Class="@(message.IsUser ? "user-message" : "bot-message")" Elevation="1">
                <div class="message-content">

                    @if (message.IsText)
                    {

                        <MudText Typo="Typo.body1">@message.Content</MudText>
                    }
                   
                </div>
            </MudPaper>
        }

    </div>
    <div class="chat-input">
        <MudTextField @bind-Value="currentMessage" Placeholder="Type a message..." Class="input-field" />
        <MudIconButton Icon="@Icons.Material.Filled.Send" Size="Size.Medium" OnClick="SendMessage" />

    </div>
</MudPaper>


@code
{
    [Parameter]
    public string IncomingMessageType { get; set; } = "Audio"; 


    private List<Message> messages = new();
    private string currentMessage;
    private ElementReference messagesContainer;
    private async void SendMessage()
    {


        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            messages.Add(new Message { Content = currentMessage, IsUser = true, IsText = true });


            var response = await _T2TService.T2TAsync(new QueryRequestTextToText { Text = currentMessage });

            if (response.Succeeded)
            {
                string decodedText = response.Data.Text;
                GenerateResponse(decodedText);
                StateHasChanged();
            }
            else
            {
                // response.Messages;
            }

                
            // GenerateResponse();
            currentMessage = string.Empty;
            ScrollToBottom();
        }
    }

  



    private void GenerateResponse(string message)
    {
         

            messages.Add(new Message
                {
                Content = message,
                    IsUser = false,
                    IsText = true

                });
        StateHasChanged();
     
 
    }



    


    private async Task ScrollToBottom()
    {
        await Task.Delay(100);

    }

    private class Message
    {
        public string Content { get; set; }
        public bool IsUser { get; set; }
        public bool IsText { get; set; }
    }
}