@using LAHJA.ApiClient.Models
@using LAHJA.ApiClient.Services.VoiceBot
@using LAHJA.Data.UI.Models
@using LAHJA.Data.UI.Templates.Services
@using LAHJA.Them
 @using MudBlazor
 @using LAHJA.Data.UI.Components.ServiceCard
 @using Microsoft.AspNetCore.Components
 @inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IVoiceBotService _VoiceBotService
@inject ISnackbar Snackbar
@inject TemplateServices _TemplateServices;

<style>

   
  

</style>
<MudCard Elevation="0" Class="rounded-lg pb-4">
    


        <MudCardHeader>
            <CardHeaderContent>
               
            </CardHeaderContent>
            <CardHeaderActions>
               
            </CardHeaderActions>
        </MudCardHeader>


        <MudCardContent>
        <div class="d-flex  flex-wrap ">
            <MudForm @ref="form" Class="w-chat-t2s" ValidationDelay="300" OnValidSubmit="Onsubmit" OnInvalidSubmit="Onsubmit">

               
            <MudTextField @ref="multilineReference" T="string" Label="Manual focus" Variant="Variant.Filled" @bind-Value="@textSpeech" Lines="10" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CenterFocusWeak"
                          OnAdornmentClick="@(() => multilineReference.FocusAsync())" />
         
                @if (_processing)
                {
                   <MudButton EndIcon="@Icons.Material.Filled.Cancel" Class="mb-3" OnClick="OnCancel" FullWidth="true" >Cancel</MudButton>
                }
                else 
                {
                    <MudButton  Disabled="@_processing" Color="@AppColors.BASE_COLOR_ENUM" Variant="Variant.Outlined" FullWidth="true"
                               EndIcon="@Icons.Material.Filled.Send" Class="mb-3" OnClick="Onsubmit">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">...</MudText>

                        }
                        else
                        {

                            <MudText>Click me</MudText>
                        }

                    </MudButton>
                }

            </MudForm>
                 

            <div class="w-chat-t2s">
                <MudCard Class="m-0 p-0  " Elevation="0">
                    <MudCardHeader>
                        <CardHeaderContent>
                           
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButtonGroup Color="@AppColors.BASE_COLOR_ENUM" Style="height: 26px" >

                                <MudIconButton Icon="@Icons.Material.Filled.Download" OnClick="DownloadAudio" Disabled="@isAudioPlayingIsEnd" Color="@AppColors.BASE_COLOR_ENUM" aria-label="github" />
                                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary" aria-label="add to favorite" />
                                <MudIconButton Icon="@Icons.Material.Filled.Share" Disabled="true" aria-label="share" />
                            </MudButtonGroup>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent> 
                        <div class="activ-speech-ai">
                            @if (isAudioPlaying){
                                <div id="logo-icon-animate-id" class="icon-xxl text-center shadow-primary rounded-circle flex-shrink-0 ripple-anim" style="line-height: 6.8rem;">
                          
                                <MudIcon Size="Size.Large" style="direction:ltr !important;margin:8px !important" Color="@AppColors.BASE_COLOR_ENUM" Icon="@Icons.Material.Filled.BlurOn" Title="API" />

                            </div>
                            }else{

                            <div id="logo-icon-static-id" class="icon-xxl text-center shadow-primary rounded-circle flex-shrink-0" style="line-height: 6.8rem;">
                               
                                <MudIcon Size="Size.Large" style="direction:ltr !important;margin:8px !important" Color="@AppColors.BASE_COLOR_ENUM" Icon="@Icons.Material.Filled.BlurOn" Title="API" />

                            </div>
                            }
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        @* @if (!string.IsNullOrEmpty(audioUrl)) *@
                        @* { *@
                            <audio id="audioPlayer" controls @onplay="OnPlay" @onended="OnEnded" @onpause="OnPause"   style="width:100%;margin:2%"></audio>
                        @* } *@
                       
                    </MudCardActions>
                </MudCard>


            </div>

        </div>
   
        </MudCardContent>

</MudCard>


@code {


    private bool isAudioPlaying = false;
    private bool isAudioPlayingIsEnd = true;

    private async Task OnPlay()
    {
        isAudioPlayingIsEnd = true;
        isAudioPlaying = true;
        StateHasChanged();
    }

    private async Task OnPause()
    {
        isAudioPlaying = false;
        _processing = false;
        StateHasChanged();
    }

    private async Task OnEnded()
    {
        isAudioPlayingIsEnd = false;
        isAudioPlaying = false;
        _processing = false;
        StateHasChanged();
    }


}




@code 
{

    private MudTextField<string> multilineReference;
    private MudForm form;
    private bool _processing = false;
    [Parameter] public DataBuildServicePage DataBuild { get; set; }
    [Parameter] public TextToSpeechComponent? Param { get; set; } = null;
    [Parameter] public EventCallback<string> PlayTextToSpeech { get; set; }
    [Parameter] public EventCallback SaveAudio { get; set; }
    [Parameter] public string OnTextSpeech { get; set; } = "";
    [Parameter] public string? OnResultUrl { get; set; } = "";
    [Parameter] public string? ModelId { get; set; } = "vits-ar-sa-A";
    private string Textt;
    private bool flag = false;

    private string SelectedLanguage { get; set; }
    private string textSpeech = "";
    private string SelectedDialect = "";

    [Parameter] public EventCallback<OnDataResult> OnSubmit { get; set; }

    [Parameter] public OnDataResult? OnResult { get; set; } = null;

    private IEnumerable<string> TextStrength(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            yield return "Text cannot be empty.";

        if (value.Length < 6)
            yield return "Password must be at least 8 characters long.";
        if (!value.Any(ch => "!@#$%^&*()".Contains(ch)))
            yield return "Password must include at least one special character (!@#$%^&*()).";
    }
    private string audioUrl;
    private async Task Onsubmit()
    {
        try
        {

            _processing = true;
            StateHasChanged();

            if (!string.IsNullOrEmpty(textSpeech))
            {   
                isAudioPlayingIsEnd = true;
                StateHasChanged();
                // var request = new QueryRequest
                //     {

                //         QueryRequestTextToText = new QueryRequestTextToText { Text = textSpeech },
                //         QueryRequestTextToSpeech = new QueryRequestTextToSpeech { TagId = "audioPlayer", Url = "https:api-inference.huggingface.co/models/wasmdashai/" + ModelId }
                //     };

                // var response = await _VoiceBotService.TextToSpeechAsync(request);
                // if (response.Succeeded)
                // {



                // }
                // else
                // {
                //     _processing = false;
                // }

                var response = await _TemplateServices.VoiceBot(new DataBuildServiceBase { Text = textSpeech, ServiceId = "3", Method = "POST", TagId = "audioPlayer", URL = "https://api-inference.huggingface.co/models/wasmdashai/" + ModelId, ModelAi=ModelId });
                if (response.Succeeded)
                {
                    // audioUrl = response.Data.Result;
                    // StateHasChanged();
                }
                else
                {

                    Snackbar.Add("·«ÌÊÃœ ·œÌﬂ —’Ìœ ﬂ«›Ì „‰ «·ÿ·»« ", Severity.Warning);

                }
            }


        } catch (Exception ex)
        {

        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }

    }

    private void testing()
    {
        Navigation.NavigateTo("/ShowInSound");
    }

    private async Task OnCancel()
    {
        _processing = false;
        StateHasChanged();
    }

    private async Task DownloadAudio()
    {
        if (!isAudioPlayingIsEnd)
                await JSRuntime.InvokeVoidAsync("downloadAudioFromElement", "audioPlayer", "downloaded-audio.mp3");
    }
   

}

