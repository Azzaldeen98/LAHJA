
@page "/settings/{*Url}"
@using LAHJA.Data.UI.Components.ProFileModel
@using LAHJA.Helpers.Services
@using LAHJA.UI.Components.ProFile.Settings
@using LAHJA.UI.Components.ProFile.USettings

@inherits ComponentBase
@inject NavigationManager NavigationManager
@inject LanguageService languageService
@inject IManageLanguageService _manageLanguageService
  
@* <ResendConfirmationemail />   *@

    @using MudBlazor
    @if(DataBuild!=null)
    {
 
    <div class=" m-0 relative flex flex-wrap  justify-content-around align-items-start md:grid md:space-y-0 w-full md:grid-cols-12 space-y-4 md:gap-6 py-6">
        
       @* Menu  *@
        <MudContainer Class="md:col-span-3 lg:col-span-3 ">
            <MudContainer Class="pt-6 border px-3 border-gray-100 rounded-xl bg-gradient-to-l overflow-hidden p-0" style="background-color:none!important">
                @* <MudLink Href="/735408478mm" Class="cols-span-9 mb-2 flex items-center px-4 pb-4"> *@

                <MudMenu Class="mr-2">
                    <ActivatorContent>
                        <MudAvatar>
                            <MudImage Style="width:70px;height:70px" Src="@data.ImageUrl" />
                        </MudAvatar>
                        <MudText Typo="Typo.h5" Class="font-bold">@data.Name</MudText>

                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Theme</MudMenuItem>
                        <MudMenuItem>Usage</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
                    @* <MudImage Alt="" Class="rounded-full mr-3 size-12 flex-none overflow-hidden bg-gray-100 dark:bg-gray-900" Src="@data.ImageUrl" /> *@
                <MudChip Class="mt-1" T="object" Color="Color.Default" Variant="Variant.Outlined">@data.Phone</MudChip>
                    <div>
                        @* <MudText Typo="Typo.h5" Class="font-bold">@data.Name</MudText> *@
                      
                    </div>
                @* </MudLink> *@
                <MudList T="string" >
                    @foreach (var item in NavItems)
                    {
                      
                            <MudNavLink style="padding:0% !important; margin:0px !important" Href="@item.Url" Match="NavLinkMatch.All" OnClick="() => SetActiveTab(item.Url)">
                                <MudText Typo="Typo.body2">@item.Label</MudText>
                                @if (!string.IsNullOrEmpty(item.Badge))
                                {
                                    <MudText Typo="Typo.caption" Class="ml-auto mr-1.5 rounded text-xs font-semibold leading-tight bg-blue-500/10 text-blue-700 dark:text-blue-200">@item.Badge</MudText>
                                }
                            </MudNavLink>
                        
                    }
                </MudList>
            </MudContainer>
            <MudContainer Class="mt-3 flex items-center gap-2 text-sm text-gray-400">
                Upgrade to
                <MudLink Href="/settings/billing/subscription#subscribe" Class="flex items-center">
                    <MudIcon Icon="mdi-crown" Class="mr-1" />
                    Pro
                </MudLink>
            </MudContainer>
        </MudContainer>

        @* Container *@
        <MudContainer Class="md:col-span-9  sm:col-span-12 lg:col-span-9 w-full border-1">
            <MudTabs Class="w-full  ">
                <MudTabPanel Class="w-full  ">
                    @if (!string.IsNullOrEmpty(Url))
                    {
                        @RenderComponentBasedOnUrl
                    }
                    else
                    {
                        <Dashboard />
                    }
                </MudTabPanel>
            </MudTabs>
        </MudContainer>
    </div>
}
else
{
    <h1>Error the element !!</h1>
}


@code
{
    [Parameter] public string Url { get; set; } = "profile"; 
    [Parameter] public DataBuildUserProfile DataBuild { get => data; set => data=value; }

    private static string CurrentLanguage = "ar";

    private DataBuildUserProfile data = new DataBuildUserProfile();

    protected override void OnInitialized()
    {

        languageService.OnLanguageChanged += ChangeLanguage;
        ChangeLanguage(CurrentLanguage);

    }

    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            CurrentLanguage = await _manageLanguageService.GetLanguageAsync();
            InvokeAsync(StateHasChanged);
        }


    }

    private static string GetLabel(string key)
    {
        return Translations[CurrentLanguage].ContainsKey(key) ? Translations[CurrentLanguage][key] : key;
    }

    private List<NavItem> NavItems;

    private static Dictionary<string, Dictionary<string, string>> Translations = new()
        {
            ["en"] = new()
            {
                ["Profile"] = "Profile",
                ["Account"] = "Account",
                ["Subscriptions"] = "Subscriptions",
                ["Authentication"] = "Authentication",
                ["Organizations"] = "Organizations",
                ["Billing"] = "Billing",
                ["Access Tokens"] = "Access Tokens",
                ["SSH and GPG Keys"] = "SSH and GPG Keys",
                ["Webhooks"] = "Webhooks",
                ["Papers"] = "Papers",
                ["Notifications"] = "Notifications",
                ["Local Apps and"] = "Local Apps and",
                ["Gated Repositories"] = "Gated Repositories",
                ["Spaces"] = "Spaces",
                ["Connected Apps"] = "Connected Apps",
                ["Theme"] = "Theme"
            },
            ["ar"] = new()
            {
                ["Profile"] = "الملف الشخصي",
                ["Account"] = "الحساب",
                ["Subscriptions"] = "الاشتراكات",
                ["Authentication"] = "التحقق",
                ["Organizations"] = "المنظمات",
                ["Billing"] = "الفوترة",
                ["Access Tokens"] = "رموز الوصول",
                ["SSH and GPG Keys"] = "مفاتيح SSH و GPG",
                ["Webhooks"] = "Webhooks",
                ["Papers"] = "الأوراق",
                ["Notifications"] = "الإشعارات",
                ["Local Apps and"] = "التطبيقات المحلية و",
                ["Gated Repositories"] = "المستودعات المحمية",
                ["Spaces"] = "المساحات",
                ["Connected Apps"] = "التطبيقات المتصلة",
                ["Theme"] = "السمة"
            }
        };

    private void ChangeLanguage(string language)
    {
        CurrentLanguage = language;
        NavItems=  new()
        {
            new NavItem { Label = GetLabel("Dashboard"), Url = "settings/Dashboard" },
            new NavItem { Label = GetLabel("Profile"), Url = "settings/profile" },
            new NavItem { Label = GetLabel("Account"), Url = "settings/Account" },
            new NavItem { Label = GetLabel("Subscriptions"), Url = "settings/Subscriptions" },
            new NavItem { Label = GetLabel("Authentication"), Url = "settings/authentication" },
            new NavItem { Label = GetLabel("Organizations"), Url = "settings/organizations" },
            new NavItem { Label = GetLabel("Billing"), Url = "settings/billing" },
            new NavItem { Label = GetLabel("Access Tokens"), Url = "settings/AccessTokens" },
            new NavItem { Label = GetLabel("SSH and GPG Keys"), Url = "settings/keys" },
            new NavItem { Label = GetLabel("Webhooks"), Url = "settings/webhooks" },
            new NavItem { Label = GetLabel("Papers"), Url = "settings/papers" },
            new NavItem { Label = GetLabel("Notifications"), Url = "settings/notifications" },
            new NavItem { Label = GetLabel("Local Apps and"), Url = "settings/local-apps", Badge = "NEW" },
            new NavItem { Label = GetLabel("Gated Repositories"), Url = "settings/gated-repos" },
            new NavItem { Label = GetLabel("Spaces"), Url = "settings/content-preferences" },
            new NavItem { Label = GetLabel("Connected Apps"), Url = "settings/applications" },
            new NavItem { Label = GetLabel("Theme"), Url = "settings/theme" }
        };
        StateHasChanged();
        InvokeAsync(StateHasChanged);
    }

    public void SetActiveTab(string url)
    {
        Url = url;
    }

    private RenderFragment RenderComponentBasedOnUrl => builder =>
    {
        if (builder == null)
        {
            throw new ArgumentNullException(nameof(builder));
        }

        if (string.IsNullOrEmpty(Url))
        {
            Url = "settings/profile";
        }

        var componentMap = new Dictionary<string, Type>
                        {
                { "dashboard", typeof(Dashboard) },
                { "profile", typeof(ProfileForm) },
                { "Account", typeof(AccountTemplate) },
                { "Subscriptions", typeof(Subscription) },
                { "authentication", typeof(AuthenticationTemplate) },
                { "organizations", typeof(OrganizationsTemplate) },
                { "billing", typeof(BillingSection) },
                { "AccessTokens", typeof(AccessTokensTemplate) },
                { "keys", typeof(SSHandGPGKeysTemplate) },
                { "keys/addtype=ssh", typeof(KeysAddaSSHkey) },
                { "keys/addtype=pgp", typeof(Keysaddapgpp) },
                { "webhooks", typeof(WebhooksTemplate) },
                { "webhooks/new", typeof(Newwebhook) },
                { "papers", typeof(PapersTemplate) },
                { "notifications", typeof(NotificationsTemplate) },
                { "local-apps", typeof(LocalAppsTemplate) },
                { "gated-repos", typeof(GatedRepositoriesTemplate) },
                { "content-preferences", typeof(ContentPreferencesTemplate) },
                { "applications", typeof(ConnectedAppsTemplate) },
                { "applications/new", typeof(NewCreateanOAuthapp) },
                { "theme", typeof(ThemeTemplate) }
              };



    // تحديد المكون بناءً على `url`
    if (componentMap.TryGetValue(Url, out var componentType))
    {
        builder.OpenComponent(0, componentType);
        builder.CloseComponent();
    }
    else
    {
        // مكون افتراضي إذا لم يتم العثور على `url`
            builder.OpenComponent(0, typeof(BillingSection));
        builder.CloseComponent();
    }
    };

    private class NavItem
    {
        public string Label { get; set; }
        public string Url { get; set; }
        public string Badge { get; set; }
    }



}
