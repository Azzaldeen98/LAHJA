@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Them
 
 
 
 
@inject IDialogService DialogService
@inject ISnackbar Snackbar
 

@if (@Params != null)

{
    <MudTooltip Style="padding:2% !important" Text="@Params.Description" Color="@AppColors.BASE_COLOR_ENUM" Placement="Placement.Bottom">
        <MudListItem Icon="@Icon" T="Object" style="padding:0 !important;margin:0 !important" IconColor="@AppColors.BASE_COLOR_ENUM">
            <MudText Typo="Typo.body1" style="padding:0 !important;margin:0 !important">

            @Params.Name: @string.Join(",", Params.Quantity.ToString())

            @if (!IsAuth)
            {
                
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Primary" @onclick="DeleteAsync"   />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary"  @onclick="EditAsync" />
            }
           @*  else
            {

                    <MudIcon Icon="@Icon" Color="@AppColors.BASE_COLOR_ENUM" />
            } *@

        </MudText>
    </MudListItem>
    </MudTooltip>

}
else
{
    <MudAlert Severity="Severity.Error">@Error</MudAlert>
}

@code 
{



    public string Error { get; set; } = "No Data";



    [Parameter]  public string Icon { get; set; } = Icons.Material.Sharp.Check;



    private decimal totalPrice;
    [Parameter]
    public bool IsAuth { get; set; } = true;

    [Parameter] public FeaturePlanInfo? Params { get; set; }



    [Parameter] public EventCallback<FeaturePlanInfo> OnClickSelect { get; set; }






    [Parameter] public EventCallback<FeaturePlanInfo> OnClickDelete { get; set; }



    [Parameter] public EventCallback<FeaturePlanInfo> OnClickEdit { get; set; }

    [Parameter] public string IdCategry { get; set; }



    protected override void OnInitialized()

    {

     

        if (Params != null)

            Icon = Params.Active ? @Icons.Material.Sharp.Check : @Icons.Material.Sharp.Cancel;





    }



    private async Task EditAsync()
    {
        try
        {

            var parameters = new DialogParameters<MudDialogEditNumberFeture>
        {

            { x => x.ButtonText, "Edit" },
            { x => x.Color, @AppColors.BASE_COLOR_ENUM },
            {x => x.Params,Params}
        };

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };



            var dialog = await DialogService.ShowAsync<MudDialogEditNumberFeture>("Edit", parameters, options);



            var result = await dialog.Result;



            if (!result.Canceled)

            {

                Params = (FeaturePlanInfo)result.Data;

                if (OnClickEdit.HasDelegate)
                {
                    await OnClickEdit.InvokeAsync(Params);
                }

               

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }


    }
    private async Task DeleteAsync()
    {
        try
        {

            var parameters = new DialogParameters<MudDialogEditNumberFeture>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error },
            {x => x.Params,Params}
        };

            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            var dialog = await DialogService.ShowAsync<MudDialogEditNumberFeture>("Delete", parameters, options);

            var result = await dialog.Result;

            if (!result.Canceled)
            {
                if (OnClickDelete.HasDelegate)
                {
                    await OnClickDelete.InvokeAsync(Params);
                }

            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }


    }
}
