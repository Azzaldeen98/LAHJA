 
@using LAHJA.Data.UI.Components.Base
@using LAHJA.Data.UI.Components.Plan


@inject NavigationManager Navigation
@inherits CardPlan<SubscriptionPlanInfo>
@inject ISnackbar Snackbar

@using LAHJA.Them

@if (Params != null)

{



    @* plan - card *@

    <MudCard Class="@("p-2   "+@Params.ClassImport)">
        <MudText Typo="Typo.h6" Align="Align.Left" class="@Params.HeaderImport"> @Params.Name</MudText>
        <p class="mx-3">@Params.Description</p>
            <MudCardContent>
                <MudText Typo="Typo.body1" Class="mb-1">
                    @* <MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess"  /> *@
                @* <MudText Typo="Typo.body1">Total Price</MudText> *@
                <MudText Typo="Typo.h4" > @Params.Price <small>$</small> </MudText>
            </MudText>
                <MudList  Dense="true" T="object">

                  @*   <MudText Typo="Typo.body1"><strong> 
                        <MudIcon Icon="@Icons.Custom.Uncategorized.AlertSuccess" Color="Color.Primary" />Features:</strong></MudText> *@

                @if (FlagButton)
                {
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="@AppColors.BASE_COLOR_ENUM" OnClick="@(()=>Submit(@Params))" Class="@AppTextStyle.TEXT_TRANSFORM_NORMAL">Select Plan</MudButton>
                    </MudCardActions>

                }
                <MudDivider />
                @if (Params.Features != null && Params.Features.Count() > 0)
                {

                    @* <MudListSubheader> Services </MudListSubheader> *@
                    <MudListItem  Text="Technical Features" Expanded>
                        <NestedList>
                            @foreach (var featur in Params.Features.Where(x => x.IsFixed).ToList())
                            {
                                <MudListItem>

                                    <TechnologyFeture Params="featur" />

                                </MudListItem>

                            }
                        </NestedList>
                    </MudListItem>
                    <MudDivider />
                    <MudListItem Text="Quantitative features" @bind-Expanded="_expanded" >
                        <NestedList>
                            @foreach (var feature in Params.Features.Where(x => x.IsFixed == false).ToList())
                            {
                                <MudListItem>
                                        <NumberFeture Params="feature" IsAuth="IsAuth" OnClickDelete="ONclickDeleteNumberFeture" OnClickEdit="ONclickEditNumberFeture" />
                                </MudListItem>

                            }
                        </NestedList>
                    </MudListItem>
            
                  
               
                }
                </MudList>
            </MudCardContent>
      
    </MudCard> 
  

}





@code {
    bool _expanded=true;
}
 

@code 
{























    [Parameter] public bool FlagButton { get; set; } = true;
    [Parameter] public SubscriptionPlanInfo? Params { get; set; }




    protected override async Task OnInitializedAsync()
    {

    }

    private Color GetChipColor(bool status)
    {
        return status == true ? Color.Success : Color.Error;
    }
    private async Task Submit(SubscriptionPlanInfo input)
    {
        try
        {

            if (OnSubmit.HasDelegate)
            {
                await OnSubmit.InvokeAsync(input);
            }


        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    private async void ONclickDeleteNumberFeture(FeaturePlanInfo numberOfService)
    {
        try
        {


            Params.Price -= numberOfService.Price;
            Params.Features.Remove(numberOfService);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    private async void ONclickEditNumberFeture(FeaturePlanInfo numberOfService)
    {
        try
        {

         
            Params.Price += numberOfService.Price;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }


     



    private async void ONclickEditNumberService(FeaturePlanInfo featurePlanInfo)
    {
        try
        {
           
            CalculateTotalPrice();
              StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    private void CalculateTotalPrice()
    {

        try
        {
            // Price = 0;
            // foreach (var item in Params.Services)
            // {
            //     Price += item.Price;
            // }

            // foreach (var item in Params.numberOfServices)
            // {
            //     Price += item.Price;
            // }

    

        }
        catch(Exception ex)
        {
            
        }
    }

     


    }

 
