@using Domain.ShareData
@using LAHJA.ApiClient.Models
@using LAHJA.ApiClient.Services.VoiceBot
@using LAHJA.Data.UI.Components.ServiceCard
 
 

@using LAHJA.Helpers.Services
@inject LanguageService languageService
@inject IManageLanguageService _manageLanguageService







@using LAHJA.Data.UI.Models
@using LAHJA.Them
@using MudBlazor
@using LAHJA.Data.UI.Components.ServiceCard
@using Microsoft.AspNetCore.Components
@using LAHJA.ApiClient.Services.Query
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject LAHJA.ApiClient.Services.IT2TService _T2TService
@inject IQueryTextToSpeechService _queryTextToSpeechService
@inject IVoiceBotService _VoiceBotService




<MudPaper Class="p-4 m-2">
    <MudGrid Spacing="3" Justify="Justify.SpaceAround">
        <MudItem xs="12" sm="12" md="12">
            <MudTextField Label="Enter Name" Variant="Variant.Outlined" @bind-Value="_name" />
        </MudItem>



     
        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <MudText Typo="Typo.body2">@(TypeLanguage ? "Language" : "اللغة")</MudText>
                <MudChipSet @bind-SelectedValues="_selected2"
                            SelectionMode="SelectionMode.SingleSelection"
                            CheckMark="_checkMark2" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Language"])
                    {
                        <MudChip Value="@value" Color="@ColorCheck">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <MudText Typo="Typo.body2">@(TypeLanguage ? "Dialect" : "اللهجة")</MudText>
                <MudChipSet @bind-SelectedValues="_selected3"
                            SelectionMode="SelectionMode.SingleSelection"
                            CheckMark="_checkMark3" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Dialect"])
                    {
                        <MudChip Value="@value" Color="@ColorCheck">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <MudText Typo="Typo.body2">@(TypeLanguage ? "Type" : "النوع")</MudText>
                <MudChipSet @bind-SelectedValues="_selected1"
                            SelectionMode="SelectionMode.SingleSelection"
                            CheckMark="_checkMark1" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Type"])
                    {

                        <MudChip Value="@value" Color="@ColorCheck" OnClick="@(() => SerchDataType(@value))">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>


        @if(_selected1!=null &&_selected1.Count>0)
        {



            foreach (var item in _selected1)
            {
                if (item == "Text To Speech" || typemodel == "نص إلى كلام")
                {



                    <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudPaper Class="p-4 m-2">
                            <MudText Typo="Typo.body2">@(TypeLanguage ? "Voice" : "الصوت")</MudText>
                            <MudChipSet @bind-SelectedValues="_selected4" cha
                                        SelectionMode="SelectionMode.MultiSelection"
                                        CheckMark="_checkMark4" Variant="Variant.Text">

                                @foreach (var value in propertyValues["Voice"])
                                {
                                    <MudChip Value="@value" Color="@ColorCheck">@value</MudChip>
                                }
                            </MudChipSet>
                        </MudPaper>
                    </MudItem>
                }

            }


        }

       

        @if (DataTypeAuther!=null)
        {

            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudPaper Class="p-4 m-2">

                    <MudText Typo="Typo.body2">@(TypeLanguage ? "Author" : "النماذج ")</MudText>
                    <MudChipSet @bind-SelectedValues="_selected5"
                                SelectionMode="SelectionMode.MultiSelection"
                                CheckMark="_checkMark5" Variant="Variant.Text">
                        @foreach (var value in DataTypeAuther)
                        {
                            <MudChip Value="@value" Color="@ColorCheck">@value</MudChip>
                        }

                    </MudChipSet>
                </MudPaper>
            </MudItem>


        }

     



        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Outlined" OnClick="SubmitForm" Color="@ColorCheck">
                 
                @(TypeLanguage ? "Submit" : "تطبيق")
            </MudButton>

        </MudItem>

        <MudItem xs="12" sm="6">

            <MudButton Variant="Variant.Outlined" Color="@ColorCheck" OnClick="Navigateto">
              
                @(TypeLanguage ? "Studio  AI": "  استديو AI")
            </MudButton>

        </MudItem>
        <MudItem xs="12" sm="12">


            @if (@ResultResponce != null)
            {




                @foreach (var item in ResultResponce)
                {


                    <MudExpansionPanels  Style="width:100%!important">
                        <MudExpansionPanel Text="@item.Id" Expanded="true">
                            @item.Content
                       </MudExpansionPanel>
                 </MudExpansionPanels>
                }

            }
            else if(flag)
            {
                <MudExpansionPanels Style="width:100%!important">
                    <MudExpansionPanel Text="Audio" Expanded="true">
                         
                        <audio id="OutputPlayerId" controls></audio>
                    </MudExpansionPanel>
                </MudExpansionPanels>

            }
            

           
        </MudItem>

    </MudGrid>

</MudPaper>





@code{




    [Parameter]
    public Color ColorCheck { get; set; } = AppColors.BASE_COLOR_ENUM;
    [Parameter]
    public string TypeMode { get; set; } = " ";
    [Parameter] public bool TypeLanguage { get; set; } = true;
    private string value1;
    private Dictionary<string, List<string>> propertyValues = null;
    [Parameter] public  ModelProperties  DataBuild { get; set; } = null;

    private string _name = string.Empty;



    private IReadOnlyCollection<string> _selected4 = new HashSet<string>(){};
    private IReadOnlyCollection<string> _selected1 = new HashSet<string>() { };
    private IReadOnlyCollection<string> _selected2 = new HashSet<string>()
    {

    };
    private IReadOnlyCollection<string> _selected3 = new HashSet<string>()
    {

    };
    private IReadOnlyCollection<string> _selected5 = new HashSet<string>()
    {

    };




    private bool _checkMark1 = false;
    private bool _checkMark2 = false;
    private bool _checkMark3 = false;
    private bool _checkMark4 = false;
    private bool _checkMark5 = false;

    List<ModelProperties> DataBuild1 = null;
    List<string> DataTypeAuther = null;
    private string typemodel;
    private bool flag = false;

    private void OnSpecificChipClicked(int chipValue)
    {


        Console.WriteLine($"Chip {chipValue} was clicked.");
    }




    [Parameter] public string? ModelId { get; set; } = "vits-ar-sa-A";
    private async void SerchDataType(string type)
    {
        try
        {


            typemodel = type;
            DataTypeAuther = DataBuild1
           .Where(m => m.Type == type)
           .Select(m => m.Author)  
           .Distinct()  
           .ToList();

            StateHasChanged();


        }
        catch(Exception ex)
        {

        }

    }


    protected override async void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            var currentLanguage = await _manageLanguageService.GetLanguageAsync();
            changeLanguage(currentLanguage);

        }




    }


    private async void changeLanguage(string language)
    {

        if (language == "en")
        {
            TypeLanguage = true;
            DataBuild1 = PropertyGenerator.GenerateModelPropertiesList(9, 0);
            propertyValues = PropertyGenerator.propertyValues;
        }
        else
        {
            TypeLanguage = false;
            DataBuild1 = PropertyGenerator.GenerateModelPropertiesList(9, 1);
            propertyValues = PropertyGenerator.propertyValuesInArabic;



        }

        InvokeAsync(StateHasChanged);

    }

    protected override void OnInitialized()
    {
        try
        {


            languageService.OnLanguageChanged += changeLanguage;
            changeLanguage("ar");

        }
        catch
        {


        }

    }































 


    private async void SubmitForm()
    {


        try
        {


            if (!string.IsNullOrWhiteSpace(_name))
            {








                if (typemodel == "نص إلى نص" || typemodel == "Text To Text")
                {

                    var response = await _T2TService.T2TAsync(new QueryRequestTextToText { Text = _name });

                    if (response.Succeeded)
                    {

                        string decodedText = response.Data.Result;
                        int c = _selected5.Count;

                        ResultResponce = new List<ResultTypeModel>();
                        for(int i =1;i<=c;i++)
                        {
                            var x = new ResultTypeModel()
                                    {
                                            Id = "OutPut" + i,
                                    Content = decodedText
                                    };
                            SendServiceText(x);

                        }          }


                }
                else if (typemodel == "نص إلى كلام" || typemodel == "Text To Speech")
                {

                    int c = _selected5.Count;

                    ResultResponce = null;
                    // for (int i = 1; i <= c; i++)
                    // {
                    //     var x = new ResultTypeModel()
                    //         {
                    //             Id = "Audio" + i,
                    //             Content = _name
                    //         };
                    //     SendServiceText(x);



                    // }
                    TextSpeech(_name);
                    flag = true;


                }
                


            }


            clear();
            StateHasChanged();

        }

        catch
        {


        }



    }


    private async void TextSpeech( string textSpeech)
   
   {

        if (!string.IsNullOrEmpty(textSpeech))
        {
            
            StateHasChanged();
            var request = new QueryRequest
                {

                    QueryRequestTextToText = new QueryRequestTextToText { Text = textSpeech },
                    QueryRequestTextToSpeech = new QueryRequestTextToSpeech
                    {
                        TagId = "OutputPlayerId",
                    Url = "https://api-inference.huggingface.co/models/wasmdashai/" + ModelId }
                };

            var response = await _VoiceBotService.TextToSpeechAsync(request);
            if (response.Succeeded)
            {



            }
            else
            {
                 

            }
        }

   }
    private async void SendServiceText(ResultTypeModel obj)
    {

        ResultResponce.Add(obj);
    }


    public void clear()
    {


        string _name = string.Empty;

        _selected1 = null;
        _selected2 = null;
        _selected3 = null;
        _selected4 = null;
        _selected5 = null;


        _checkMark1 = false;
        _checkMark2 = false;
        _checkMark3 = false;
        _checkMark4 = false;
        _checkMark5 = false;
    }


    private async Task Navigateto()

    {

        try

        {



            Navigation.NavigateTo("/studio");


        }

        catch (Exception ex)

        {

           

        }

    }
   
    private void HandleSelectionChanged(HashSet<string> selected)
    {

    }
    private Dictionary<string, HashSet<string>> selectedValues = new Dictionary<string, HashSet<string>>();

  
    List<ResultTypeModel> ResultResponce;
    public class ResultTypeModel
    {

        public string Id { get; set; }
        public string TypeResult { get; set; }
        public string Content { get; set; }


    }
}
