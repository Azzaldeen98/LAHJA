<MudPaper Class="p-4 m-2">

    <MudGrid Spacing="3">
        <MudItem xs="12" sm="12" md="12">
            <MudTextField Label="Enter Name" Variant="Variant.Outlined" @bind-Value="_name" />
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <h6>Type</h6>
                <MudChipSet @bind-SelectedValues="_selected1"
                            SelectionMode="SelectionMode.MultiSelection"
                            CheckMark="_checkMark1" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Type"])
                    {
                        <MudChip Value="@value">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <h6>Language</h6>
                <MudChipSet @bind-SelectedValues="_selected2"
                            SelectionMode="SelectionMode.MultiSelection"
                            CheckMark="_checkMark2" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Language"])
                    {
                        <MudChip Value="@value">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <h6>Dialect</h6>
                <MudChipSet @bind-SelectedValues="_selected3"
                            SelectionMode="SelectionMode.MultiSelection"
                            CheckMark="_checkMark3" Variant="Variant.Text">
                    @foreach (var value in propertyValues["Dialect"])
                    {
                        <MudChip Value="@value">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <h6>Voice</h6>
                <MudChipSet @bind-SelectedValues="_selected4"
                            SelectionMode="SelectionMode.MultiSelection"
                            CheckMark="_checkMark4" Variant="Variant.Text" >

                    @foreach (var value in propertyValues["Voice"])
                    {
                        <MudChip Value="@value">@value</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        </MudItem>


        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudPaper Class="p-4 m-2">
                <h6>Author</h6>
                <MudChipSet @bind-SelectedValues="_selected5"
                            SelectionMode="SelectionMode.MultiSelection"
                            CheckMark="_checkMark5" Variant="Variant.Text"  >
                    @foreach (var value in propertyValues["Author"])
                    {
                        <MudChip Value="@value">@value</MudChip>
                    }

                </MudChipSet>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Variant="Variant.Filled" OnClick="SubmitForm">
                Submit
            </MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            @if (@ResultResponce != null)
            {
                @foreach (var item in ResultResponce)
                {
                    <MudExpansionPanels  Style="width:100%">
                        <MudExpansionPanel Text="@item.Id" Expanded="true">
                            @item.Content
    </MudExpansionPanel>
                 </MudExpansionPanels>
                }

            }
        </MudItem>

    </MudGrid>
</MudPaper>





@code {


    private string _name = string.Empty;
    private IReadOnlyCollection<string> _selected4;
    private IReadOnlyCollection<string> _selected1 = new HashSet<string>()
    {
       "Text To Speech"
    };

    private IReadOnlyCollection<string> _selected2 = new HashSet<string>()
    {
       "Arabic"
    };
    private IReadOnlyCollection<string> _selected3 = new HashSet<string>()
    {
       "Najd"
    };

    private IReadOnlyCollection<string> _selected5 = new HashSet<string>()
    {
       "Author 1","Author 2","Author 3"
    };


    private bool _checkMark1 = true;
    private bool _checkMark2 = true;
    private bool _checkMark3 = true;
    private bool _checkMark4 = true;
    private bool _checkMark5 = true;


    private async void SubmitForm()
    {



        ResultResponce = new List<ResultTypeModel>()
        {

           new ResultTypeModel()
            {
                Id="Output1",TypeResult="Txt",Content="السلام عليكم ",

            },
              new ResultTypeModel()
            {
                Id="Output2",TypeResult="Txt",Content="السلام عليكم ",

            },
              new ResultTypeModel()
            {
                Id="Output3",TypeResult="Txt",Content="السلام عليكم ",

            }
        };
        clear();
        StateHasChanged();

    }


    public void clear()
    {


        string _name = string.Empty;

        _selected1 = null;
        _selected2 = null;
        _selected3 = null;
        _selected4 = null;
        _selected5 = null;


        _checkMark1 = false;
        _checkMark2 = false;
        _checkMark3 = false;
        _checkMark4 = false;
        _checkMark5 = false;
    }

    private Dictionary<string, List<string>> propertyValues = new Dictionary<string, List<string>>()
    {
        { "UsageCount", new List<string> { "600","8888" } },
        { "ModelImageUrl", new List<string> { "/ai-hand.png", "/ai-robot.png", "chat-boat.jpg", "chatbot-cta.png" } },
        { "Type", new List<string> { "Text To Text", "Text To Speech", "Chat Model" } },
        { "Voice", new List<string> { "Male", "Female" } },
        { "Language", new List<string> { "English", "Spanish", "French", "German", "Arabic" } },
        { "Dialect", new List<string> { "American", "British", "Australian" ,"Najd","Hijazi"} },
        { "Quality", new List<string> { "High", "Medium", "Low" } },
        { "Token", new List<string> { "100", "500", "1000", "5000", "10000" } },
        { "ModelVersion", new List<string> { "v1.0", "v1.1", "v2.0", "v2.5", "v3.0" } },
        { "CreationDate", new List<string> { "2023-01-01", "2022-12-15", "2021-11-20" } },
        { "LastUpdated", new List<string> { "2023-12-01", "2023-11-15", "2023-10-30" } },
        { "Description", new List<string> { "Random generated description.", "High-quality model for tasks.", "Used in various applications." } },
        { "Author", new List<string> { "Author 1", "Author 2", "Author 3" } },
        { "Accuracy", new List<string> { "0.90", "0.85", "0.95" } },
        { "Speed", new List<string> { "Fast", "Medium", "Slow" } },
        { "Framework", new List<string> { "TensorFlow", "PyTorch", "Keras" } },
        { "Parameters", new List<string> { "1000000", "5000000", "10000000" } }
    };
    private void HandleSelectionChanged(HashSet<string> selected)
    {

    }
    private Dictionary<string, HashSet<string>> selectedValues = new Dictionary<string, HashSet<string>>();

    protected override void OnInitialized()
    {
        foreach (var property in propertyValues.Keys)
        {
            selectedValues[property] = new HashSet<string>();
        }

    }
    List<ResultTypeModel> ResultResponce;
    public class ResultTypeModel
    {

        public string Id { get; set; }
        public string TypeResult { get; set; }
        public string Content { get; set; }


    }
}
