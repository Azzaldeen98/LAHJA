@using LAHJA.Data.UI.Components.Base
@using LAHJA.Data.UI.Components.Billing


@using System.ComponentModel.DataAnnotations
@using LAHJA.Them
@inject ISnackbar Snackbar

@inherits PaymentCard<DataBuildBillingBase>
@using LAHJA.Data.UI.Components.Payment.DataBuildBillingBase
@using MudBlazor
 



 
  
<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-4">Edit Billing Contact</MudText>
            <MudForm @ref="form" Model="billingContact">
             <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.FullName" Required="true" />
             <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.Email" Required="true" />
                @* @<MudTextField Label="Secondary Email" Variant="Variant.Text" @bind-Value="billingContact.SecondaryEmail" /> *@

                <MudGrid Class="mt-3" Spacing="3">
                     <MudItem xs="4">
                <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.MobilePhoneNumber" />
               </MudItem>
                   <MudItem xs="4">
                <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.Address1" />
                </MudItem>
                </MudGrid>
           @*      @<MudTextField Label="Address 2" Variant="Variant.Text" @bind-Value="billingContact.Address2" /> *@
                <MudGrid Class="mt-3" Spacing="3">
                    <MudItem xs="4">
                        <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.City" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.State" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField   Variant="Variant.Text" @bind-Value="billingContact.ZipCode" />
                    </MudItem> 
                </MudGrid>
                <MudGrid Class="mt-3" Spacing="3">
                    <MudItem xs="6">
                        <MudSelect  @bind-Value="billingContact.Country" Required="true">
                            <MudSelectItem Value="@("YE")">Yemen</MudSelectItem>
                            <MudSelectItem Value="@("US")">United States</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect   @bind-Value="billingContact.Currency" Required="true">
                            <MudSelectItem Value="@("USD")">USD (Dollar)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
               

                </MudGrid>
               @* 
                <MudTextField Label="Billing Registration Number" Variant="Variant.Text" @bind-Value="billingContact.BillingRegistrationNumber" />
                <MudTextField Label="VAT Number" Variant="Variant.Text" @bind-Value="billingContact.VatNumber" />

                 *@
                
                <div class="d-flex justify-content-around mt-4">
                    <MudButton Color="@AppColors.BASE_COLOR_ENUM" Class="@AppTextStyle.TEXT_TRANSFORM_NORMAL" Variant="Variant.Filled" OnClick="SaveChanges">Save</MudButton>
                    <MudButton Color="Color.Default" Class="@AppTextStyle.TEXT_TRANSFORM_NORMAL" Variant="Variant.Filled" OnClick="Cancle">Cancle</MudButton>
                </div>
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>





@code{
    private MudForm form;
    
 

    public DataBuildBillingBase billingContact;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Params != null)
            {
                billingContact = Params;
            }
            else
            {

                billingContact = new DataBuildBillingBase();
            }
            StateHasChanged();
        }
        catch
        {

        }



    }

    private  async Task   SaveChanges()
    {
        try
        {



            if (OnClickSave.HasDelegate && billingContact!=null)
            {

                await OnClickSave.InvokeAsync(billingContact);
            }
           


        }
        catch(Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
    private async void Cancle()
    {
        try
        {

           
               
            
        }
        catch(Exception ex)
        {

        }
    }
   
}



 



 
