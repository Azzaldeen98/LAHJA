


@using LAHJA.Data.UI.Components.Payment.DataBuildBillingBase
@using LAHJA.Data.UI.Components.Payment.CreditCard
@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Helpers
@using LAHJA.Helpers.Services
@using LAHJA.Them
@using LAHJA.UI.Components.Billing.Shared
@inject ISnackbar Snackbar
 
@using MudBlazor

@inject AuthService AuthService
<MudLayout>

    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4" Style="padding:3%!important">


        <MudDivider Class="my-4" />
        <UpgradePlan  BuildData="@BuildPlanData" />
        <MudDivider Class="my-4" />

        <BillingMethodsSection ReadData="OnReadBillingData" BuildData="BuildBillingData" />
        <MudDivider Class="my-4" />
        <PaymentMethodsSection SelectedCard="OnSelectedCardData" BuildData="BuildCreditCardData" EditCard="EditCard" CreateCard="CreateCard" />

  
        <MudButton Variant="Variant.Filled" Size="Size.Large" OnClick="Payment" Color="@AppColors.BASE_COLOR_ENUM">Payment</MudButton>
    </MudContainer>
  
</MudLayout>

@code 

{



    [Parameter] public EventCallback<CardDetails> OnSelect { get; set; }
    [Parameter] public EventCallback<CardDetails> CreateCard { get; set; }
    [Parameter] public EventCallback<CardDetails> EditCard { get; set; }
    [Parameter] public EventCallback<SubscriptionPlanInfo> SubmitPayment { get; set; }


    [Parameter] public SubscriptionPlanInfo? BuildPlanData { get; set; } = null;
    [Parameter] public DataBuildBillingBase? BuildBillingData { get; set; } = null;
    [Parameter] public List<CardDetails>? BuildCreditCardData { get; set; } = null;

    [Parameter] public string planId { get; set; }
    private DataBuildBillingBase billing { get; set; }
    private CardDetails card { get; set; }

    private void OnSelectedCardData(CardDetails? data)
    {
        if (data != null && !string.IsNullOrEmpty(data.CardNumber))
        {
            card = data;
            StateHasChanged();
        }
    }
    private  void OnReadBillingData(DataBuildBillingBase? data)
    {
        if (data != null && !string.IsNullOrEmpty(data.FullName))
        {
            billing = data;
            StateHasChanged();
        }

    }


    public async void Payment()
    {
        if (SubmitPayment.HasDelegate)// && billing!=null && card!=null)
        {
            await SubmitPayment.InvokeAsync(BuildPlanData);
        }
        else
        {
            
        }

        @* Snackbar.Add(BuildPlanData.TotalPrice.ToString(), Severity.Error); *@
    }

    private List<SubscriptionPlanInfo> planInfos;

 
}
