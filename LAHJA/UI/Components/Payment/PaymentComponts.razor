


@using Domain.ShareData
@using LAHJA.Data.UI.Components.Payment.DataBuildBillingBase
@using LAHJA.Data.UI.Components.Payment.CreditCard
@using LAHJA.Data.UI.Components.Plan
@using LAHJA.Helpers
@using LAHJA.Helpers.Services
@using LAHJA.Them
@using LAHJA.UI.Components.Billing.Shared
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using LAHJA.UI.Components.Payment.CreditCard
@using MudBlazor
@inject IManageLanguageService _manageLanguageService

@inject AuthService AuthService
<MudLayout Class="w-100">

    <div class="mt-4 container_flex_column justify-content-center align-items-center p-2" >


        <MudDivider Class="my-4" />
      
        <UpgradePlan BuildData="@BuildPlanData" SubmitConfirm="OnSubmitConfirmPlan" SubmitUpgrade="OnSubmitUpgradePlan" SubmitCancel="OnSubmitCancelPlan" />
        
        <MudDivider Class="my-4" />
        @if (isConfirm)
        {
            <MudPaper Elevation="1" Class="w-100 container_flex_wrap">
             
                    <div class="w60 mt-3">
                        <BillingMethodsSection ReadOnly="@(BuildBillingData!=null)" ReadData="OnReadBillingData" BuildData="BuildBillingData" />
                     </div>

                 <div class="w40 mt-3">
                    <PaymentMethodsSection SelectedCard="OnSelectedCardData" BuildData="BuildCreditCardData"  EditCard="OnEditCard" CreateCard="OnCreateCard" />
                </div>
                @* </div> *@
                <MudButton Class="@(@AppTextStyle.TEXT_TRANSFORM_NORMAL+" m-5")" Variant="Variant.Filled"
                           Size="Size.Large" OnClick="Payment" Color="@AppColors.BASE_COLOR_ENUM">@GetTranslation("ContinueToPayment")</MudButton>
            </MudPaper>
        }
    </div>
  
</MudLayout>

@code 

{



    [Parameter] public EventCallback<CardDetails> OnSelect { get; set; }
    [Parameter] public EventCallback<CardDetails> CreateCard { get; set; }
    [Parameter] public EventCallback<CardDetails> EditCard { get; set; }
    [Parameter] public EventCallback<SubscriptionPlanInfo> SubmitPayment { get; set; }


    [Parameter] public SubscriptionPlanInfo? BuildPlanData { get; set; } = null;
    [Parameter] public DataBuildBillingBase? BuildBillingData { get; set; } = null;
    [Parameter] public List<CardDetails>? BuildCreditCardData { get; set; } = null;
    [Parameter] public string planId { get; set; }

    private DataBuildBillingBase billing { get; set; }


    private CardDetails card { get; set; }
    private bool isConfirm = false;

    private string CurrentLanguage { get; set; } = "ar";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CurrentLanguage = await _manageLanguageService.GetLanguageAsync();
            StateHasChanged();
        }
    }
    private async Task OnCreateCard(CardDetails input)
    {

    }
    private async Task OnEditCard(CardDetails data)
    {

    }


    private async Task OnSubmitConfirmPlan(SubscriptionPlanInfo input)
    {
        if (input != null)
        {
            isConfirm = true;
            StateHasChanged();
        }
    }

    private async Task OnSubmitCancelPlan(SubscriptionPlanInfo input)
    {
        if ( input != null)
        {

        }
    }

    private async Task OnSubmitUpgradePlan(SubscriptionPlanInfo input)
    {
        if (input != null)
        {

        }
    }


    private void OnSelectedCardData(CardDetails? data)
    {
        if (data != null && !string.IsNullOrEmpty(data.CardNumber))
        {
            card = data;
            StateHasChanged();
        }
    }
    private  void OnReadBillingData(DataBuildBillingBase? data)
    {
        if (data != null && !string.IsNullOrEmpty(data.FullName))
        {
            billing = data;
            StateHasChanged();
        }

    }
    


    public async void Payment()
    {
        if (SubmitPayment.HasDelegate)// && billing!=null && card!=null)
        {
            await SubmitPayment.InvokeAsync(BuildPlanData);
        }
        else
        {
          
        }

        @* Snackbar.Add(BuildPlanData.TotalPrice.ToString(), Severity.Error); *@
    }

    private List<SubscriptionPlanInfo> planInfos;
    private string GetTranslation(string key)
    {
        return CurrentLanguage == "ar"
            ? TransAr.GetValueOrDefault(key, key)
            : TransEn.GetValueOrDefault(key, key);
    }

    private Dictionary<string, string> TransEn = new Dictionary<string, string>()
    {
        { "ContinueToPayment", "Continue to Payment" },
  

    };

    private Dictionary<string, string> TransAr = new Dictionary<string, string>()
    {
        { "ContinueToPayment", "متابعة الدفع" },
  

    };
 
}
